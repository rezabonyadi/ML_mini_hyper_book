[
["index.html", "Optimization and Machine Learning: A Collection Preface", " Optimization and Machine Learning: A Collection Reza Bonyadi, Ph.D. 2019-07-28 Preface I wrote my first machine learning (ML) project in the autumn of 2000, which was a characters hand-written recognition in the Pascal language, and I quite enjoyed the topic ever since. The field is growing astronomically fast these days and everyday I am learning something new. One reason behind such fast growth is that the top largest companies in the world, i.e., Microsoft, Google, Amazon, and Apple, all invest their largest R&amp;D budgets on this. This collection (or as I call it, hyper-book) is meant to document and centralize the best links, descriptions, and material in each topic I found for my learning. The intention is not to re-write what has been written hundereds of times by very skilled authors, but to summarize methods, rank best pages/books which describe them, and refer to programming codes I found the best for that topic, if relevant. For each topic I provide my oppinions on what it is and when/where/why/and how to use it. To ensure the audience of this collection covers a larger range, I keep the descriptions simple and to the point, with minimum mathematical equations, if possible. "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction Machine learning refers to a set of algorithms which make a machine (with a computer as its brain) to apparently learn. Learning is not Not fully observed, hence, there need to be assumptions as the solutions is not unique "],
["classification.html", "Chapter 2 Classification 2.1 The optimal binary classifier 2.2 Logistic regression 2.3 Support vector machines 2.4 Decision tree 2.5 K-nearest neighbor", " Chapter 2 Classification Classification refers to learning by examples to categorize instances. For example, you are given a data-set of people who got a heart attach or no heart attack after their 50’s. Each instance has been characterized by attributes such as smoking habits, history of heart attack in the family, number of hours of exercise per day, hight, weight, among others. The task is to find a generic rule which estimates, for any given new person with given characteristics, if the person is going to have a heart attack after their 50s. Another example of classification is that, given some attributes of a tumor (e.g., shape, color, genetic information, history of the patient, among others), find a generic rule that estimates the tumor type for any tumor: benign, type 1, type 2, or type 3. In a more general framework, given a set of instances (\\(X\\), which has \\(m\\) rows and \\(n\\) columns, each row is an instance and each column is an attribute) and their associated classes (\\(Y\\), which has \\(m\\) rows, containing a categorical value in each row), we seek a mathematical rule (line and hyper-plane are special case of this) which can generate the class label, \\(y\\), for any given instance, \\(x\\) (\\(1\\) row and \\(n\\) columns). A synthetic classification problem has been given in Fig. 1. In this problem, we have two attributes per instance and two groups of instances (blue and red), and the discriminatory rule has been assumed to be represented by a line. The aim of classification (binary in this case) with these assumptions is to find a line (discriminatory line, hyper-plane in higher number of dimensions) which discriminates between the two classes “optimally” (see figure). Fig 1: Two attributes (horizontal and vertical axes), two classes (red and blue), and three lines which can separate the classes successfully. As usually the given instances do not represent all possible instances for a given problem, therefore, any rule, in any shape and form, that separates the given instances is acceptable (purple, green, and orange lines in the figure). Hence, defining “the best discriminatory rule” (a rule that not only separates the given instances but also all other unseen instances) is not possible. This leads to different assumptions upon which different classifiers are formulated. For example, support vector machines assume that the discriminatory rule is represented by a line which has the maximum distance from the instances in each class. The idea is that such line is more empirically robust against potential uncertainties in unseen instances. See this article (Bonyadi and Reutens 2019) for a formal definition of discriminative classification. 2.1 The optimal binary classifier Let’s assume that the discriminatory rule in a classification problem is represented by a line, and we want to find a line that “optimally” discriminates between two classes. This optimality should be measured by an objective function, a function that assigns a “wrongness” score to each line (called the loss function), which needs to be minimized. One simple function would be the number of instances that are not in the correct side of the line. To implement this loss function, one can use a \\(0/1\\) function that returns a \\(0\\) if an instance is in the correct side of the given line and a \\(1\\) otherwise. The sum of the 0/1 function over all instances is called the “0/1 loss function”, which is minimized by an optimization algorithm. The outcome of this minimization is a line which has a minimum 0/1 loss value. Fig 2: Two candidate lines, green gives 4/30 and the orange gives 3/30 loss value according to the 0/1 loss function. In Fig. 2, for example, the 0/1 loss value is the same for the green line and the orange line. The 0/1 loss function does not take into account the importance of number of miss-classified instances from different classes (all classes are assumed to be equally important). In the previous example (Fig. 2), the number of blue instances is smaller than the number of red instances, which means miss-classification of blue instances leads to a larger natural loss comparing to the red instances. For example, the orange line has a very high accuracy on red instances while its accuracy on the blue is not as high as the green line. To address this issue, it has been proposed in this (Bonyadi and Reutens 2019) article to minimize the average of the 0/1 loss values of over the classes rather than than the summation of the 0/1 function across all instances (Bonyadi and Reutens 2019). To implement this idea, for a given discriminatory line, one can iterate over all instances of each class and calculate the 0/1 loss function for each class separately and then average those loss values across all classes. In Fig. 2, for example, this average for the green line is \\(\\frac{(2/10+2/20)}{2}\\) (2 miss-classified instances from each class) and for the orange line is \\(\\frac{3/10+1/20}/2\\) (e miss-classified from blue and 1 from red). Hence, the green line would be preferred. The 0/1 loss function in both above-mentioned forms is unbiased and not sensitive to outliers as any outlier would only contribute 1 unit to the loss function if it is miss-classified. Finding a line that minimizes the average of the 0/1 loss function in both above-mentioned forms is not easy (see this (Doerr et al. 2015) and this (Bonyadi and Reutens 2019)). One issue is that this line is not unique. For example, both orange and green lines in Fig. 1 have the same accuracy in terms of discriminating between the classes. This is solved by selecting the line which has the maximum distance from the instances of both classes (see this paper (Bonyadi and Reutens 2019)). The basic idea is, if there are multiple lines which separate instances from each class with the same accuracy, the one which has the maximum distance from each class is preferred. The Python, Java, and Matlab code is available for that article (https://github.com/rezabonyadi/LinearOEC). Another issue is that optimizing the 0/1 loss function in the formed mentioned before is not practical, i.e., it is NP-Complete. This has encouraged introduction to lots of new loss functions which approximate the 0/1 loss function while they are differentiable. 2.2 Logistic regression Logistic regression introduces a loss function that estimates the 0/1 loss function with a differentiable alternative, hence, can be optimized effectively by gradient descent. 2.2.1 Variable importance in LR 2.3 Support vector machines What is support vector machine 2.3.1 Kernel tricks 2.3.2 Implementations 2.4 Decision tree 2.5 K-nearest neighbor What is it Why does it work How to implement References "],
["regression.html", "Chapter 3 Regression 3.1 Linear regression 3.2 Decision tree for regression", " Chapter 3 Regression This introduces regression. 3.1 Linear regression 3.2 Decision tree for regression "],
["dimensionality-reduction.html", "Chapter 4 Dimensionality reduction 4.1 Principle component analysis 4.2 Singular value decomposition", " Chapter 4 Dimensionality reduction What is it Supervised and unsupervised 4.1 Principle component analysis 4.2 Singular value decomposition "],
["metrics-learning.html", "Chapter 5 Metrics learning 5.1 Large margin nearest neighbor", " Chapter 5 Metrics learning What is it 5.1 Large margin nearest neighbor "],
["neural-networks.html", "Chapter 6 Neural networks 6.1 Multi-layer perceptron 6.2 Mixed density networks 6.3 Convolutional neural networks 6.4 Autoencoders", " Chapter 6 Neural networks 6.1 Multi-layer perceptron 6.2 Mixed density networks 6.3 Convolutional neural networks 6.4 Autoencoders "],
["bayesian-inference.html", "Chapter 7 Bayesian inference 7.1 Random forest 7.2 Ensemble techniques", " Chapter 7 Bayesian inference Frequentists: p-value depends on the number of trials Bayesian: After each trial, the probability distribution is updated (prior is modified to get posterior) https://www.quantstart.com/articles/Bayesian-Linear-Regression-Models-with-PyMC3 https://twiecki.io/blog/2015/11/10/mcmc-sampling/ 7.1 Random forest 7.2 Ensemble techniques "],
["reinforcement-learning.html", "Chapter 8 Reinforcement learning 8.1 Q-learning", " Chapter 8 Reinforcement learning 8.1 Q-learning "],
["bagging-and-boosting.html", "Chapter 9 Bagging and boosting 9.1 Extreme boosted tree", " Chapter 9 Bagging and boosting 9.1 Extreme boosted tree "],
["introduction-1.html", "Chapter 10 Introduction", " Chapter 10 Introduction What is optimziation Examples Derivative-free vs with derivative "],
["optimization-problems.html", "Chapter 11 Optimization problems 11.1 Single and Multi objective 11.2 Constrains in problems 11.3 Dynamic optimization problems", " Chapter 11 Optimization problems 11.1 Single and Multi objective 11.2 Constrains in problems 11.3 Dynamic optimization problems "],
["use-of-derivative-in-optimization.html", "Chapter 12 Use of derivative in optimization", " Chapter 12 Use of derivative in optimization "],
["derivative-free-algorithms.html", "Chapter 13 Derivative-free algorithms 13.1 Finite difference 13.2 Population-based optimization", " Chapter 13 Derivative-free algorithms 13.1 Finite difference 13.2 Population-based optimization 13.2.1 Genetic algorithm 13.2.2 Evolutionary strategy 13.2.3 Covariance matrix adaptation 13.2.4 Particle swarm optimization "]
]
